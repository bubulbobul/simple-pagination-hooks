{"version":3,"sources":["components/Posts.js","components/Pagination.js","App.js","serviceWorker.js","index.js"],"names":["Posts","posts","loading","className","map","post","key","id","title","Pagination","postsPerPage","totalPosts","paginate","pageNumbers","i","Math","ceil","push","number","onClick","href","API_URL","App","useState","setPosts","setLoading","currentPage","setCurrentPage","useEffect","a","axios","get","res","data","fetchPosts","indexOfLastPost","indexOfFirstPost","currentPosts","slice","length","pageNumber","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0SAsBeA,EApBD,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MACb,OADkC,EAAdC,QAET,0CAGP,wBAAIC,UAAU,mBAENF,EAAMG,IAAI,SAAAC,GACN,OACI,wBAAIC,IAAKD,EAAKE,GAAIJ,UAAU,mBACvBE,EAAKG,WCanBC,EAvBI,SAAC,GAGhB,IAH4D,IAA1CC,EAAyC,EAAzCA,aAAcC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,SACtCC,EAAc,GAEXC,EAAI,EAAGA,GAAKC,KAAKC,KAAKL,EAAaD,GAAeI,IACvDD,EAAYI,KAAKH,GAErB,OACI,6BACI,wBAAIX,UAAU,cAENU,EAAYT,IAAI,SAAAc,GAAM,OAClB,wBAAIZ,IAAKY,EAAQf,UAAU,aACvB,uBAAGgB,QAAS,kBAAMP,EAASM,IAASE,KAAK,KAAKjB,UAAU,aACnDe,SCV3BG,EAAU,6CAsCDC,MApCf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNtB,EADM,KACCuB,EADD,OAEiBD,oBAAS,GAF1B,mBAENrB,EAFM,KAEGuB,EAFH,OAGyBF,mBAAS,GAHlC,mBAGNG,EAHM,KAGOC,EAHP,OAIUJ,mBAAS,GAAzBb,EAJM,oBAMbkB,oBAAU,YACQ,sCAAG,4BAAAC,EAAA,4DACjBJ,GAAW,GADM,SAECK,IAAMC,IAAIV,GAFX,OAEXW,EAFW,OAGjBR,EAASQ,EAAIC,MACbR,GAAW,GAJM,yCAAH,qDAOhBS,IACC,IAKH,IAAMC,EAAkBT,EAAchB,EAChC0B,EAAmBD,EAAkBzB,EACrC2B,EAAepC,EAAMqC,MAAMF,EAAkBD,GAKnD,OACE,yBAAKhC,UAAU,kBACb,wBAAIA,UAAU,qBAAd,sCACA,kBAAC,EAAD,CAAOF,MAAOoC,EAAcnC,QAASA,IACrC,kBAAC,EAAD,CAAYQ,aAAcA,EAAcC,WAAYV,EAAMsC,OAAQ3B,SANrD,SAAC4B,GAAD,OAAgBb,EAAea,QCpB9BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.94f5887f.chunk.js","sourcesContent":["import React from 'react'\n\nconst Posts = ({ posts, loading }) => {\n    if (loading) {\n        return <h2>Loading...</h2>\n    }\n    return (\n        <ul className=\"list-group mb-4\">\n            {\n                posts.map(post => {\n                    return (\n                        <li key={post.id} className=\"list-group-item\">\n                            {post.title}\n                        </li>\n                    )\n\n                })\n            }\n        </ul>\n    )\n}\n\nexport default Posts\n","import React from 'react'\n\nconst Pagination = ({ postsPerPage, totalPosts, paginate }) => {\n    const pageNumbers = [];\n\n    for (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\n        pageNumbers.push(i)\n    }\n    return (\n        <nav>\n            <ul className=\"pagination\">\n                {\n                    pageNumbers.map(number => (\n                        <li key={number} className=\"page-item\">\n                            <a onClick={() => paginate(number)} href=\"!#\" className=\"page-link\">\n                                {number}\n                            </a>\n                        </li>\n                    ))\n                }\n            </ul>\n        </nav>\n    )\n}\n\nexport default Pagination\n","import React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport Posts from \"./components/Posts\"\nimport Pagination from \"./components/Pagination\";\n\nconst API_URL = \"https://jsonplaceholder.typicode.com/posts\"\n\nfunction App() {\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage] = useState(7);\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      setLoading(true);\n      const res = await axios.get(API_URL);\n      setPosts(res.data);\n      setLoading(false)\n    }\n\n    fetchPosts();\n  }, []);\n\n  // console.log(posts)\n\n  // Get current posts\n  const indexOfLastPost = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\n  const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);\n\n  // Change page\n  const paginate = (pageNumber) => setCurrentPage(pageNumber)\n\n  return (\n    <div className=\"container mt-5\">\n      <h1 className=\"text-primary mb-3\">Simple Pagination with react hooks</h1>\n      <Posts posts={currentPosts} loading={loading} />\n      <Pagination postsPerPage={postsPerPage} totalPosts={posts.length} paginate={paginate} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}